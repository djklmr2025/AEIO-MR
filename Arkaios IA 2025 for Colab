{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VjYy0F2gZIPR"
      },
      "outputs": [],
      "source": [
        "# Reiniciar completamente el entorno\n",
        "import os\n",
        "import shutil\n",
        "\n",
        "# Asegurarse de estar en el directorio ra√≠z\n",
        "os.chdir('/content')\n",
        "\n",
        "# Eliminar completamente el directorio\n",
        "if os.path.exists('AEIO-MR'):\n",
        "    shutil.rmtree('AEIO-MR')\n",
        "\n",
        "# Clonar fresh\n",
        "!git clone https://github.com/djklmr2025/AEIO-MR\n",
        "\n",
        "# Entrar al directorio\n",
        "%cd /content/AEIO-MR\n",
        "\n",
        "# Instalar dependencias b√°sicas primero\n",
        "!pip install flask flask-cors flask-socketio eventlet\n",
        "!pip install pyngrok\n",
        "\n",
        "# --- CONFIGURAR NGROK CON TU TOKEN ---\n",
        "from pyngrok import ngrok\n",
        "\n",
        "# TU TOKEN DE NGROK\n",
        "NGROK_AUTH_TOKEN = \"32AwHmDcHcu8VoBjfh67UQ6EGFo_4fUMiZbTuPkXr4fnLYFhC\"\n",
        "ngrok.set_auth_token(NGROK_AUTH_TOKEN)\n",
        "print(\"‚úÖ Token de ngrok configurado correctamente\")\n",
        "\n",
        "# --- EJECUTAR SERVIDOR EN SEGUNDO PLANO ---\n",
        "import subprocess\n",
        "import time\n",
        "\n",
        "# Iniciar el servidor en background (usando nohup para que no se detenga)\n",
        "print(\"üöÄ Iniciando servidor ARKAIOS en segundo plano...\")\n",
        "server_process = subprocess.Popen([\n",
        "    'nohup', 'python', 'server_arkaios.py', '--share', '--always-high-vram', '&'\n",
        "])\n",
        "\n",
        "# Esperar a que el servidor inicie completamente\n",
        "print(\"‚è≥ Esperando 15 segundos para que el servidor inicie...\")\n",
        "time.sleep(15)\n",
        "\n",
        "# Verificar que el servidor est√° corriendo\n",
        "!ps aux | grep python | grep server_arkaios\n",
        "\n",
        "# --- CREAR T√öNEL NGROK ---\n",
        "print(\"üåê Creando t√∫nel ngrok...\")\n",
        "public_url = ngrok.connect(5000)\n",
        "print(\"üéâ ¬°TU SERVIDOR EST√Å ACTIVO!\")\n",
        "print(\"üîó URL P√∫blica:\", public_url)\n",
        "print(\"üì± Comparte este enlace: \" + public_url)\n",
        "print(\"üè† Local: http://127.0.0.1:5000\")\n",
        "print(\"üìö Docs: \" + public_url + \"/docs\")\n",
        "\n",
        "# Mostrar logs del servidor para verificar\n",
        "print(\"\\nüìã √öltimas l√≠neas del log del servidor:\")\n",
        "!tail -10 nohup.out 2>/dev/null || echo \"No hay logs a√∫n, esperando...\"\n",
        "\n",
        "# --- MANTENER ACTIVO Y MONITOREAR ---\n",
        "import requests\n",
        "import threading\n",
        "\n",
        "def check_server_status():\n",
        "    \"\"\"Funci√≥n para verificar cada minuto que el servidor sigue activo\"\"\"\n",
        "    while True:\n",
        "        try:\n",
        "            response = requests.get(\"http://127.0.0.1:5000/health\", timeout=10)\n",
        "            print(f\"‚úÖ Servidor saludable ({response.status_code}) - {time.strftime('%H:%M:%S')}\")\n",
        "        except Exception as e:\n",
        "            print(f\"‚ùå Error conectando al servidor: {e}\")\n",
        "            print(\"üîÑ Intentando reiniciar servidor...\")\n",
        "            os.system(\"pkill -f server_arkaios.py\")\n",
        "            subprocess.Popen(['nohup', 'python', 'server_arkaios.py', '--share', '--always-high-vram', '&'])\n",
        "            time.sleep(10)\n",
        "\n",
        "        time.sleep(60)\n",
        "\n",
        "# Iniciar monitoreo en segundo plano\n",
        "monitor_thread = threading.Thread(target=check_server_status, daemon=True)\n",
        "monitor_thread.start()\n",
        "\n",
        "print(\"\\n\" + \"=\"*60)\n",
        "print(\"üöÄ SERVIDOR ARKAIOS EJECUT√ÅNDOSE EN SEGUNDO PLANO\")\n",
        "print(\"üåê URL P√öBLICA:\", public_url)\n",
        "print(\"üìä Monitoreo activo - El servidor se reiniciar√° autom√°ticamente si falla\")\n",
        "print(\"=\"*60)\n",
        "\n",
        "# Mantener el proceso principal activo\n",
        "try:\n",
        "    while True:\n",
        "        time.sleep(3600)  # Esperar 1 hora entre checks principales\n",
        "        print(\"‚è∞ Verificaci√≥n peri√≥dica - Todo OK\")\n",
        "except KeyboardInterrupt:\n",
        "    print(\"üõë Deteniendo servidor y ngrok...\")\n",
        "    os.system(\"pkill -f server_arkaios.py\")\n",
        "    os.system(\"pkill -f ngrok\")\n",
        "    print(\"‚úÖ Procesos detenidos\")"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "gpuType": "T4",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}